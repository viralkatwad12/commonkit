import 'package:flutter_test/flutter_test.dart';
import 'package:commonkit/src/helpers/network_helper.dart';
import 'package:http/http.dart' as http;
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

// Generate mocks with Mockito
import 'network_helper_test.mocks.dart';

// Mock class for http.Client, generated by Mockito
@GenerateMocks([http.Client])
void main() {
  /// Group of tests for NetworkHelper.
  group('NetworkHelper', () {
    late NetworkHelper network;
    late MockClient mockClient;

    setUp(() {
      // Initialize mock client and network helper before each test
      mockClient = MockClient();
      network = NetworkHelper(
        baseUrl: 'https://api.example.com',
        client: mockClient, // Pass the mock client
      );
    });

    test('get request succeeds', () async {
      // Mock a successful GET response with a Future<http.Response>
      when(mockClient.get(Uri.parse('https://api.example.com/test')))
          .thenAnswer((_) async => http.Response('{"data": "test"}', 200));

      // Perform the GET request
      final result = await network.get('/test');

      // Verify the response data
      expect(result['data'], 'test');
    });

    test('get request fails with error', () async {
      // Mock a failed GET response
      when(mockClient.get(Uri.parse('https://api.example.com/test')))
          .thenAnswer((_) async => http.Response('Not Found', 404));

      // Expect an exception to be thrown
      expect(() => network.get('/test'), throwsException);
    });
  });
}